package pacote.USB;

import java.util.ArrayList;
import java.util.Scanner;

public class AgenteDeSaude extends Pessoa {

    private static ArrayList<Familia> familias = ArquivoUtil.carregarFamilias();

    public static boolean autenticar(Scanner sc) {
        System.out.print("Digite o CPF do Agente de Saúde: ");
        String cpfDigitado = sc.nextLine();

        String cpfCorreto = "12345678900"; // CPF de teste

        if (cpfDigitado.equals(cpfCorreto)) {
            System.out.println("Acesso permitido!");
            return true;
        } else {
            System.out.println("CPF inválido! Acesso negado.");
            return false;
        }
    }

    public static void executar(Scanner sc) {
        int opcao;
        do {
            System.out.println("\n--- OPÇÕES ---");
            System.out.println("1 - Cadastrar Moradores");
            System.out.println("2 - Listar Moradores");
            System.out.println("3 - Editar Moradores");
            System.out.println("4 - Remover Moradores");
            System.out.println("0 - Voltar");
            System.out.print("Escolha: ");
            opcao = sc.nextInt();
            sc.nextLine(); //para limpar o buffer

            switch (opcao) {
                case 1: registrar(sc); break;
                case 2: listar(); break;
                case 3: editar(sc); break;
                case 4: remover(sc); break;
                case 0: System.out.println("Voltando ao menu principal..."); break;
                default: System.out.println("Opção inválida.");
            }
        } while (opcao != 0);
    }

    private static void registrar(Scanner sc) {
        System.out.println("Digite o nome do responsável: ");
        String nomeResp = sc.nextLine();
        System.out.println("Digite o CPF do responsável: ");
        String cpfResp = sc.nextLine();

        Morador responsavel = new Morador(nomeResp, cpfResp);
        Familia familia = new Familia(responsavel);

        String opcao;
        do {
            System.out.println("Deseja adicionar um morador à família? (s/n)");
            opcao = sc.nextLine();

            if (opcao.equalsIgnoreCase("s")) {
                System.out.println("Nome do morador: ");
                String nome = sc.nextLine();
                System.out.println("CPF do morador: ");
                String cpf = sc.nextLine();
                Morador m = new Morador(nome, cpf);
                familia.adicionarMorador(m);
            }
        } while (opcao.equalsIgnoreCase("s"));

        familias.add(familia);
        ArquivoUtil.salvarFamilias(familias);
        System.out.println("Família cadastrada com sucesso!");
    }

    private static void listar() {
        if (familias.isEmpty()) {
            System.out.println("Nenhuma família cadastrada.");
            return;
        }
        for (Familia f : familias) {
            System.out.println(f);
        }
    }

    private static void editar(Scanner sc) {
        System.out.print("Digite o CPF do morador que deseja editar: ");
        String cpf = sc.nextLine();

        for (Familia f : familias) {
            if (f.getResponsavel().getCpf().equals(cpf)) {
                System.out.println("Editando responsável atual: " + f.getResponsavel().getNome());
                System.out.print("Novo nome: ");
                String novoNome = sc.nextLine();
                f.getResponsavel().setNome(novoNome);
                ArquivoUtil.salvarFamilias(familias);
                System.out.println("Dados atualizados!");
                return;
            }
            Morador m = f.buscarMorador(cpf);
            if (m != null) {
                System.out.println("Editando morador atual: " + m.getNome());
                System.out.print("Novo nome: ");
                String novoNome = sc.nextLine();
                m.setNome(novoNome);
                ArquivoUtil.salvarFamilias(familias);
                System.out.println("Dados atualizados!");
                return;
            }
        }
        System.out.println("Morador com CPF " + cpf + " não encontrado.");
    }

    private static void remover(Scanner sc) {
        System.out.print("Digite o CPF do morador que deseja remover: ");
        String cpf = sc.nextLine();

        for (Familia f : familias) {
            if (f.getResponsavel().getCpf().equals(cpf)) {
                familias.remove(f);
                ArquivoUtil.salvarFamilias(familias);
                System.out.println("Responsável e toda a família foram removidos!");
                return;
            }
            Morador m = f.buscarMorador(cpf);
            if (m != null) {
                f.removerMorador(cpf);
                ArquivoUtil.salvarFamilias(familias);
                System.out.println("Morador removido com sucesso!");
                return;
            }
        }
        System.out.println("Morador com CPF " + cpf + " não encontrado.");
    }

    private String areaAtuacao;

    public AgenteDeSaude(String cpf, String nome, String areaAtuacao) {
        super(cpf, nome);
        this.areaAtuacao = areaAtuacao;
    }

    public String getAreaAtuacao() {
        return areaAtuacao;
    }

    @Override
    public String toString() {
        return "Agente de Saúde = " + nome + ", área: " + areaAtuacao;
    }
}
